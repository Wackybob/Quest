
Entity
	
	An object in the game. Ranges from timers to enemies.
	Entities are the sum of its Properties and Components.
	
	
Property

	A single, simple point of data. Can be a string, number or vector.
	
	
Component

	An advanced Property. Collection of data for a specific use.
	Has state. Uses resources. Can expose internal variables as Properties.


System

	A part of the engine with a specific area of responsibility. Works
	with Properties and Components.
	The engine is, by and large, the sum of all the different Systems.
	
	
Resource

	An asset that can be shared by entities. It contains no entity-specific
	data, has no logic and is stateless. Often represents some data on disk.
	
	
	

Textures are resources. Sprites really shouldn't be.
Models aren't resources for sure.
All state should actually be in properties, but it becomes cumbersome
with complex data, like animation for a skeletal model. In that case we
would need to store all animation data for all joints as individual data,
with unique keys.
Maybe I should implement real components... Collections of properties that
belong together in an ordered manner. See properties as a tree, not flat.

"External" data visible through properties. "Internal" stored in some other way.
E.g animation name and frame is exposed, but internal lerp data, etc, is not.

{ 
  "position" : [0.0, 1.0],
  "name" : "foo",
  "model(worm)" : {
    "animation" : "idle",
    "frame" : "0",
    "fps" : "15.0"
  },
  "model(lasse)" : {
    ...
  }
}

Hm, doesn't work if you want 2 worms.
ALT:

"models" : {
  "worm" : {
    "animation" : "jump",
    "frame" : "1"
  },
  "lasse" {
    ...
  }
}

Make above an array instead and you can have multiple worms.
Drawback: Not as generic, more complex loading code.
Let different systems load what they are good at loading,
load rest generically.
ModelSystem knows about "models", loads everything.



Model actually encompasses more data that is hidden: The skeleton hierarchy,
with its joints and bones and their animation state.
Should be able to query this data too, as properties!

QSTPropery *frame = getProperty("model/worm/frame");	// Something like that
frame.intVal += 2;

QSTProperty *gunPos = [entity property:@"model/worm/joints/gun/position"];

QSTModel2D *model = [entity model:@"worm"];						// <-- NOOO :(
QSTModel2D *model = (QSTModel2D*)[entity component:@"worm"];	// Better.

QSTModel2DJoint *gun = [model jointWithName:@"gun"];






Helt nya tankar!

EXTREMT modulärt. (fast jag tänker fortfarande fokusera på 2D-äventyrsspel i första hand).

Motorn består av ett antal System.
Systemen registrerar entities efter egna krav.
De arbetar sedan på properties i entitiesen.

Systemen kan kodas i objc eller [scriptspråk]. De laddas dynamiskt av motorn
utifrån något form av manifest.

PhysicsSystem är t.ex inget som behövs i 100World, eller så behövs det ett annat slags.
GraphicsSystem kan också bytas ut om man behöver 3D-grafik t.ex.

Varje system har ett eget sätt att hålla reda på entities.


Spelladdarkod är också unikt för olika speltyper. 100World genererar t.ex en värld.



















Koncept, tankar och idéer:

Quest är en 2D-äventyrsspelmotor.

Med Quest kan man göra Super Metroid/Shadow Complex-liknande spel OCH INGET ANNAT.

Med andra ord är i princip det enda som skiljer spelen åt deras grafik, karta och fiendelogik. Gameplay är samma. Kontrollerna är samma. Kartsystemet är samma. Allt detta står motorn för.



Världen är "freeform"-baserad istället för tilemap. Karaktärer är riktiga skelettstyrda (2D)modeller istället för enkla sprites.
Modellerna kommer vara uppbyggda av sprites.




Saker jag tänker på snabbt och som kan vara bra att alla får reda på:
- Spelaren sätter man inte ut i Area manuellt, det gör motorn. Vilken Area och position spelet börjar i och hur spelaren ser ut osv anges någon annanstans. Kanske borde man kunna sätta ut en för debug-syfte i och för sig...












Hm, kan jag ha bara en enda scen?
Nej, inte snyggt, för varje system vill ha olika grejer däri,
och det känns lite bättre att de tar hand om det själva.

Känns också onödigt att ha olika sorters scenes, ett för
varje system. Enklare att bara ha en lista.

Flytta ut scenen till grafiksystemet.



Jag vill:
Ta bort allt som heter Cmp
Göra om CollisionMap till en Res?
Fastställa vad en resource är (=något laddat från hddn?)
							  (=en instans som används av flera?)
							  
Skit i scener for now.